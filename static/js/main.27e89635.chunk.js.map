{"version":3,"sources":["timerMachine.js","App.js","serviceWorker.js","index.js"],"names":["ticker","ctx","cb","interval","setInterval","clearInterval","timerExpired","console","log","elapsed","duration","deadlineApproaching","App","audioEl","useRef","timerMachine","options","createMachine","id","initial","strict","context","on","RESET","target","ADD_TIME","actions","assign","evt","amount","states","idle","entry","TOGGLE","running","invoke","src","normal","cond","undefined","overtime","deadline_approaching","TICK","paused","createTimerMachine","Number","URLSearchParams","window","location","search","get","playSound","current","play","stopSound","pause","useEffect","transparent","document","documentElement","style","setProperty","useMachine","state","send","className","data-state","toStrings","join","class","viewBox","width","height","fill","r","cx","cy","pathLength","slice","toGo","Math","ceil","minutes","floor","abs","seconds","String","prefix","padStart","getTime","onClick","type","disabled","matches","ref","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAEMA,EAAS,SAACC,GAAD,OAAS,SAACC,GACvB,IAAMC,EAAWC,aAAY,WAC3BF,EAAG,UACa,IAAfD,EAAIE,UACP,OAAO,kBAAME,cAAcF,MAGvBG,EAAe,SAACL,GAEpB,OADAM,QAAQC,IAAI,WACLP,EAAIQ,SAAWR,EAAIS,UAEtBC,EAAsB,SAACV,GAC3B,OAAOA,EAAIS,SAAW,IAAMT,EAAIQ,S,cCgGnBG,MAvGf,WACE,IAAMC,EAAUC,iBAAO,MACjBC,EDQ0B,SAACL,EAAUM,GAC3C,OAAOC,YACL,CACEC,GAAI,QACJC,QAAS,OACTC,QAAQ,EACRC,QAAS,CACPX,WACAD,QAAS,EACTN,SAAU,IAEZmB,GAAI,CACFC,MAAO,CACLC,OAAQ,QAEVC,SAAU,CACRC,QAASC,YAAO,CACdjB,SAAU,SAACT,EAAK2B,GAEd,OADArB,QAAQC,IAAIoB,GACL3B,EAAIS,SAAwB,GAAbkB,EAAIC,YAKlCC,OAAQ,CACNC,KAAM,CACJC,MAAOL,YAAO,CACZjB,WACAD,QAAS,IAEXa,GAAI,CACFW,OAAQ,YAGZC,QAAS,CACPC,OAAQ,CACNjB,GAAI,SACJkB,IAAKpC,GAEPmB,QAAS,SACTW,OAAQ,CACNO,OAAQ,CACNf,GAAI,CACF,GAAI,CACF,CACEE,OAAQ,uBACRc,KAAM3B,IAGVY,WAAOgB,IAGXC,SAAU,CACRR,MAAO,aAETS,qBAAsB,CACpBnB,GAAI,CACF,GAAI,CACFE,OAAQ,WACRc,KAAMhC,MAKdgB,GAAI,CACFoB,KAAM,CACJhB,QAASC,YAAO,CACdlB,QAAS,SAACR,GAAD,OAASA,EAAIQ,QAAUR,EAAIE,aAGxC8B,OAAQ,WAGZU,OAAQ,CACNX,MAAO,YACPV,GAAI,CAAEW,OAAQ,cAIpBjB,GCvFmB4B,CAAmBC,OAAQ,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,UAAY,GAAI,CAC9GxB,QAAS,CACPyB,UAAW,SAAClD,EAAK2B,GACff,EAAQuC,QAAQC,QAElBC,UAAW,SAACrD,EAAK2B,GACff,EAAQuC,QAAQG,YAItBC,qBAAU,WAER,IACIC,EADY,IAAIX,gBAAgBC,OAAOC,SAASC,QACxBC,IAAI,eAChC3C,QAAQC,IAAIiD,GACRA,GACFC,SAASC,gBAAgBC,MAAMC,YAC7B,qBACA,iBAGH,IAvBU,MAwBSC,YAAW/C,GAxBpB,mBAwBNgD,EAxBM,KAwBCC,EAxBD,OAyB2BD,EAAM1C,QAAtCX,EAzBK,EAyBLA,SAAUD,EAzBL,EAyBKA,QAASN,EAzBd,EAyBcA,SAY3B,OACE,yBACE8D,UAAU,MACVC,aAAYH,EAAMI,YAAYC,KAAK,KACnCR,MAAO,CACL,aAAclD,EACd,YAAaD,EACb,aAAcN,IAGhB,yBAAK8D,UAAU,gBACb,yBACEI,MAAM,eACNC,QAAQ,cACRC,MAAM,MACNC,OAAO,MACPC,KAAK,QAEL,4BAAQC,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKC,WAAW,MAC1C,4BACEZ,UAAU,WACVS,EAAE,KACFC,GAAG,KACHC,GAAG,KACHC,WAAW,OAGf,yBAAKZ,UAAU,WACb,yBAAKA,UAAU,eAAeF,EAAMI,YAAYW,OAAO,IACvD,yBAAKb,UAAU,SAvCvB,WACE,IAAMc,EAAOC,KAAKC,KAAKvE,EAAWD,GAC5ByE,EAAUF,KAAKG,MAAMH,KAAKI,IAAIL,GAAQ,IACtCM,EAAUC,OAAON,KAAKI,IAAIL,GAAQ,IACpCQ,EAAS,GAIb,OAHI9E,EAAUC,IACZ6E,EAAS,KAEL,GAAN,OAAUA,GAAV,OAAmBL,EAAnB,YAA8BG,EAAQG,SAAS,EAAG,MA+BpBC,IACxB,yBAAKxB,UAAU,WACb,4BAAQyB,QAAS,kBAAM1B,EAAK,CAAE2B,KAAM,WAAY9D,OAAQ,MAAxD,MAGA,4BAAQ6D,QAAS,kBAAM1B,EAAK,CAAE2B,KAAM,WAAY9D,OAAQ,OAAxD,OAGA,4BACEoC,UAAU,UACV2B,SAAU7B,EAAM8B,QAAQ,WACxBH,QAAS,kBAAM1B,EAAK,WAHtB,YAUN,yBAAK9C,GAAG,YACL6C,EAAM8B,QAAQ,YACb,4BAAQH,QAAS,kBAAM1B,EAAK,YAC1B,kBAAC,IAAD,QAGFD,EAAM8B,QAAQ,SAAW9B,EAAM8B,QAAQ,YACvC,4BAAQH,QAAS,kBAAM1B,EAAK,YAC1B,kBAAC,IAAD,QAIN,2BAAO8B,IAAKjF,GACV,4BAAQuB,IAAI,sCAAsCuD,KAAK,kBC5F3CI,QACW,cAA7BhD,OAAOC,SAASgD,UAEe,UAA7BjD,OAAOC,SAASgD,UAEhBjD,OAAOC,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtG,QAAQsG,MAAMA,EAAMC,c","file":"static/js/main.27e89635.chunk.js","sourcesContent":["import { createMachine, assign } from \"xstate\";\n\nconst ticker = (ctx) => (cb) => {\n  const interval = setInterval(() => {\n    cb(\"TICK\");\n  }, ctx.interval * 1000);\n  return () => clearInterval(interval);\n};\n\nconst timerExpired = (ctx) => {\n  console.log(\"chec OT\");\n  return ctx.elapsed >= ctx.duration;\n};\nconst deadlineApproaching = (ctx) => {\n  return ctx.duration - 10 <= ctx.elapsed;\n};\n// https://xstate.js.org/viz/?gist=78fef4bd3ae520709ceaee62c0dd59cd\nexport const createTimerMachine = (duration, options) => {\n  return createMachine(\n    {\n      id: \"timer\",\n      initial: \"idle\",\n      strict: true,\n      context: {\n        duration,\n        elapsed: 0,\n        interval: 0.1,\n      },\n      on: {\n        RESET: {\n          target: \"idle\",\n        },\n        ADD_TIME: {\n          actions: assign({\n            duration: (ctx, evt) => {\n              console.log(evt);\n              return ctx.duration + evt.amount * 60;\n            },\n          }),\n        },\n      },\n      states: {\n        idle: {\n          entry: assign({\n            duration,\n            elapsed: 0,\n          }),\n          on: {\n            TOGGLE: \"running\",\n          },\n        },\n        running: {\n          invoke: {\n            id: \"ticker\", // only used for viz\n            src: ticker,\n          },\n          initial: \"normal\",\n          states: {\n            normal: {\n              on: {\n                \"\": [\n                  {\n                    target: \"deadline_approaching\",\n                    cond: deadlineApproaching,\n                  },\n                ],\n                RESET: undefined,\n              },\n            },\n            overtime: {\n              entry: \"playSound\",\n            },\n            deadline_approaching: {\n              on: {\n                \"\": {\n                  target: \"overtime\",\n                  cond: timerExpired,\n                },\n              },\n            },\n          },\n          on: {\n            TICK: {\n              actions: assign({\n                elapsed: (ctx) => ctx.elapsed + ctx.interval,\n              }),\n            },\n            TOGGLE: \"paused\",\n          },\n        },\n        paused: {\n          entry: \"stopSound\",\n          on: { TOGGLE: \"running\" },\n        },\n      },\n    },\n    options\n  );\n};\n","import React, { useRef, useEffect } from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { createTimerMachine } from \"./timerMachine\";\nimport { FaPlayCircle, FaPauseCircle } from \"react-icons/fa\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const audioEl = useRef(null);\n  const timerMachine = createTimerMachine(Number( new URLSearchParams(window.location.search).get(\"time\")) || 60, {\n    actions: {\n      playSound: (ctx, evt) => {\n        audioEl.current.play();\n      },\n      stopSound: (ctx, evt) => {\n        audioEl.current.pause();\n      },\n    },\n  });\n  useEffect(() => {\n    //element.style.setProperty(\"--my-var\", jsVar + 4);\n    let urlParams = new URLSearchParams(window.location.search);\n    let transparent = urlParams.get(\"transparent\");\n    console.log(transparent);\n    if (transparent) {\n      document.documentElement.style.setProperty(\n        \"--color-background\",\n        \"transparent\"\n      );\n    }\n  }, []);\n  const [state, send] = useMachine(timerMachine);\n  const { duration, elapsed, interval } = state.context;\n\n  function getTime() {\n    const toGo = Math.ceil(duration - elapsed);\n    const minutes = Math.floor(Math.abs(toGo) / 60);\n    const seconds = String(Math.abs(toGo) % 60);\n    let prefix = \"\";\n    if (elapsed > duration) {\n      prefix = \"-\";\n    }\n    return `${prefix}${minutes}:${seconds.padStart(2, \"0\")}`;\n  }\n  return (\n    <div\n      className=\"App\"\n      data-state={state.toStrings().join(\" \")}\n      style={{\n        \"--duration\": duration,\n        \"--elapsed\": elapsed,\n        \"--interval\": interval,\n      }}\n    >\n      <div className=\"timerwrapper\">\n        <svg\n          class=\"timer-circle\"\n          viewBox=\"0 0 100 100\"\n          width=\"100\"\n          height=\"100\"\n          fill=\"none\"\n        >\n          <circle r=\"40\" cx=\"50\" cy=\"50\" pathLength=\"1\"></circle>\n          <circle\n            className=\"progress\"\n            r=\"40\"\n            cx=\"50\"\n            cy=\"50\"\n            pathLength=\"1\"\n          ></circle>\n        </svg>\n        <div className=\"display\">\n          <div className=\"state faded\">{state.toStrings().slice(-1)}</div>\n          <div className=\"timer\">{getTime()}</div>\n          <div className=\"addtime\">\n            <button onClick={() => send({ type: \"ADD_TIME\", amount: 1 })}>\n              +1\n            </button>\n            <button onClick={() => send({ type: \"ADD_TIME\", amount: 10 })}>\n              +10\n            </button>\n            <button\n              className=\"actions\"\n              disabled={state.matches(\"running\")}\n              onClick={() => send(\"RESET\")}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n      </div>\n      <div id=\"controls\">\n        {state.matches(\"running\") && (\n          <button onClick={() => send(\"TOGGLE\")}>\n            <FaPauseCircle />\n          </button>\n        )}\n        {(state.matches(\"idle\") || state.matches(\"paused\")) && (\n          <button onClick={() => send(\"TOGGLE\")}>\n            <FaPlayCircle />\n          </button>\n        )}\n      </div>\n      <audio ref={audioEl}>\n        <source src=\"Ready_to_Fight_-_David_Fesliyan.mp3\" type=\"audio/mpeg\" />\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}